@echo off
setlocal EnableDelayedExpansion
set batfilenam=%~n0%~x0
set batdir=%~dp0
set batdir=%batdir:~0,-1%
set _vspgINDENTS=%_vspgINDENTS%.
call :Echos START from %batdir%

echo This bat is not to be called directly.
exit /b 0



REM =============================
REM ====== Functions Below ======
REM =============================

:Echos
  REM This function preserves %ERRORLEVEL% for the caller,
  REM and, LastError does NOT pollute the caller.
  setlocal & set LastError=%ERRORLEVEL%
  echo %_vspgINDENTS%[%batfilenam%] %*
exit /b %LastError%

:EchosV1
  REM echo %* only when vspg_DO_SHOW_VERBOSE=1 .
  setlocal & set LastError=%ERRORLEVEL%
  if not defined vspg_DO_SHOW_VERBOSE goto :_EchosV1_done
  echo %_vspgINDENTS%[%batfilenam%]# %*
:_EchosV1_done
exit /b %LastError%

:EchoAndExec
  echo %_vspgINDENTS%[%batfilenam%] EXEC: %*
  call %*
exit /b %ERRORLEVEL%

:EchoVar
  setlocal & set Varname=%~1
  call echo %_vspgINDENTS%[%batfilenam%]%~2 %Varname% = %%%Varname%%%
exit /b 0

:SetErrorlevel
  REM Usage example:
  REM call :SetErrorlevel 4
exit /b %1

:PackDoubleQuotes
  REM Take whole %* as input, replace each " with "" and return the result string.
  REM The return value is put in global var _vspg_dqpacked .
  set allparams=%*
  set _vspg_dqpacked=%allparams:"=""%
exit /b 0

:UnpackDoubleQuotes
  if "%~2" == "" (
    set %~1=
    exit /b 0
  )
  setlocal & set allparams=%~2
  set unpacked=%allparams:""="%
  endlocal & (
    set %~1=%unpacked%
  )
exit /b 0


:GetAbsPath
  REM Get absolute-path from a relative-path(relative to %CD%). 
  REM If already absolute, return as is.
  REM If your input dir is relative to current .bat, use RelaPathToAbs instead.
  REM Param1: Var name to receive output.
  REM Param2: The input path.
  REM
  REM Feature 1: this function removes redundant . and .. from input path.
  REM I
  REM For example:
  REM     call :GetAbsPath outvar C:\abc\.\def\..\123
  REM Returns outvar:
  REM     C:\abc\123
  REM
  REM Feature 2: It's pure string manipulation, so the input path doesn't have to 
  REM actually exist on the file-system.
  REM
  if "%~1"=="" exit /b 4
  if "%~2"=="" exit /b 4
  for %%a in ("%~2") do set "%~1=%%~fa"
exit /b 0

:GetParentDir
  REM Example
  REM
  REM   call :GetParentDir outputvar "c:\program files\d1\d2"
  REM 
  REM Return:
  REM 
  REM   outputvar=c:\program files\d1
  REM 
  REM Note:
  REM * If input a relative path, it is relative to %CD%, and a AbsPath is returned.
  REM * It is pure string manipulation, no actual path needs to exist.
  REM * It removes redundant . and .. from input path.
  REM * You can use :GetAbsPath to achieve the same functionality.
  setlocal
  if "%~1"=="" exit /b 4
  for %%g in ("%~2") do set parentdir=%%~dpg
  endlocal & ( set "%~1=%parentdir:~0,-1%" )
exit /b 0

:RelaPathToAbs
  REM Get absolute-path from a relative-path(relative to current .bat's dir). 
  REM If input is already an absolute path, return as is.
  REM Param1: Var name to receive output.
  REM Param2: The input path, can be filepath or dirpath, can contain ".." .
  REM
  REM Note: Since we use `pushd`, the input path should actually exist on the 
  REM file-system to make it work correctly.
  REM
  setlocal & pushd "%~dp0"
  if "%~1"=="" exit /b 4
  if "%~2"=="" exit /b 4
  for %%a in ("%~2") do set "parent_dir=%%~fa"
  endlocal & ( set "%~1=%parent_dir%" )
exit /b 0


:AssertHasValue
  REM Assert that batch variables has non-empty value.
  REM Each param is an variable name.
  if "%~1"=="" exit /b 0
  if not defined %~1 (
    call :Echos [ERROR] '%~1' has empty value.
    exit /b 4
  )
  shift
  goto :AssertHasValue
exit /b 444


:Touch
  REM Touch updates a file's modification time to current.
  REM NOTE: No way to check for success/fail here. So, call it only when 
  REM you have decided to fail the whole bat.

  copy /b "%~1"+,, "%~1" >NUL 2>&1
exit /b %ERRORLEVEL%


:SleepSeconds
  REM Here, we use ping.exe to simluate delay.
  REM Don't use `timeout /t 3` etc, bcz timeout will refuse to work from VSIDE called .bat,
  REM Run `timeout /t 3 < some-exist-file.txt` and you can see the fail.
  call :Echos Sleep %~1 seconds...
  ping 127.0.0.1 -n %~1 -w 1000 > nul
  ping 127.0.0.1 -n 2 -w 1000 > nul
exit /b


:IsParamExisted
  REM Check whether a "needle word" exists in the list of parameters.
  REM (using case insensitive string compare)
  REM Usage:
  REM   call :IsParamExisted "needle word" param1 param2 "param 3" ...
  REM 
  REM Example:
  REM 
  REM   call :IsParamExisted  "foo word" param2 "foo word" param3
  REM --the result is ERRORLEVEL 1, which means "foo word" exists in the params.
  REM 
  REM For 
  REM   call :IsParamExisted  "foo word" param2 foo word param3
  REM --the result is ERRORLEVEL 0, which means "foo word" NOT existed in the params.
  REM 
  setlocal
  set needle=%~1
:_IsParamExisted_check1param
  shift
  if "%~1" == "" exit /b 0
  if /i "%~1" == "%needle%" exit /b 1
  goto :_IsParamExisted_check1param


:RemoveDuplicateParams
  REM Usage: 
  REM   call :RemoveDuplicateParams OutVar param1 param2 "param 3" ...
  REM
  REM Example:
  REM 
  REM   call :RemoveDuplicateParams MyVar abc 123 Abc "One word" "123"
  REM
  REM Output:
  REM   MyVar= "abc" "123" "One word"
  REM 
  REM Yes, it has side-effects, the OutVar's content will have each param surrounded 
  REM by double-quotes. The good news is, we can still use 
  REM   for %%i in (%MyVar%) do (
  REM      echo param=[%%~i]
  REM   )
  REM to split and process the params one-by-one.
  REM
  REM Limitation: Caller must not place a empty param ("") in the list,
  REM because the empty param will mark the end of the whole param list.
  REM
  setlocal
  set outvarName=%~1
  set outputValue=
:_RemoveDuplicateParams_check1param
  shift
  if "%~1" == "" goto :_RemoveDuplicateParams_end
  
  set param=%~1
  call :IsParamExisted "%param%" %outputValue%
  if not errorlevel 1 ( 
    REM Not existed yet, so append the new param to outputValue.
    set outputValue=%outputValue% "%param%"
  )
  goto :_RemoveDuplicateParams_check1param

:_RemoveDuplicateParams_end
  endlocal & (
    set "%outvarName%=%outputValue%"
  )
exit /b 0


:RemoveDuplicateInVarname
  REM Example:
  REM 
  REM   call :RemoveDuplicateInVarname MyVar
  REM 
  REM Check for contents in MyVar, as if MyVar's content is a series of params that would
  REM be passed to some new command. If some param has appeared before in the param list,
  REM remove it from the list, so that MyVar contains no duplicate items. 
  REM On return, MyVar's value is updated.
  REM 
  REM This function internally calls :RemoveDuplicateParams to do the core work.
  REM 
  setlocal
  set UserVarname=%~1
  set UserVarval=!%UserVarname%!
  call :RemoveDuplicateParams OutputVal %UserVarval%
  
  endlocal & (
    set "%UserVarname%=%OutputVal%"
  )
exit /b 0


:ReverseParams
  REM Usage: 
  REM   call :ReverseParams OutVar param1 param2 "param 3" ...
  REM
  REM Example:
  REM 
  REM   call :ReverseParams MyVar 123 456 "one word"
  REM 
  REM will result in:
  REM   MyVar="one word" "456" "123" 
  REM 
  REM Limitation: Caller must not place a empty param ("") in the list,
  REM because the empty param will mark the end of the whole param list.
  REM
  setlocal
  set outvarName=%~1
  set outputValue=
:_ReverseParams_nextword
  shift
  if "%~1" == "" goto :_ReverseParams_end

  set param=%~1
  set outputValue="%param%" %outputValue%
  goto :_ReverseParams_nextword

:_ReverseParams_end
  endlocal & (
    set "%outvarName%=%outputValue%"
  )
exit /b 0


:ReverseInVarName
  REM Example:
  REM 
  REM   set MyVar=123 456 "one word"
  REM   call :ReverseInVarName MyVar
  REM 
  REM will result in:
  REM   MyVar="one word" "456" "123"
  REM 
  REM This function internally calls :ReverseParams to do the core work.
  REM
  setlocal
  set UserVarname=%~1
  set UserVarval=!%UserVarname%!
  call :ReverseParams OutputVal %UserVarval%
  
  endlocal & (
    set "%UserVarname%=%OutputVal%"
  )
exit /b 0

